package pt.uminho.lei.dss.db;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import pt.uminho.lei.dss.model.Equipa;
import pt.uminho.lei.dss.model.Projecto;
import pt.uminho.lei.dss.model.Voluntario;

public final class VoluntarioDAO extends AbstractDAO{
    
    private static final String SELECT_VOLUNTARIOS = "select idVoluntario,Nome,Profissao,Telefone,DataNascimento,Email,Rua,Localidade,CodPostal,Funcionario,Documento,Ativo from Voluntario";
    private static final String SELECT_VOLUNTARIO = "select idVoluntario,Nome,Profissao,Telefone,DataNascimento,Email,Rua,Localidade,CodPostal,Funcionario,Documento,Ativo from Voluntario where idVoluntario = ?";
    private static final String SELECT_VOLUNTARIOS_NOME = "select idVoluntario,Nome,Profissao,Telefone,DataNascimento,Email,Rua,Localidade,CodPostal,Funcionario,Documento,Ativo from Voluntario where nome LIKE ?";
    private static final String SELECT_PROJECTOSVOLUNTARIO = "select Projecto, Voluntario from ProjectoVoluntario where Voluntario = ?";
    private static final String SELECT_EQUIPAVOLUNTARIO = "select Equipa, Voluntario, Activa from EquipaVoluntario where Voluntario = ?";
    
    private static final String INSERT_VOLUNTARIO = "insert into Voluntario (Nome,Profissao,Telefone,DataNascimento,Email,Rua,Localidade,CodPostal,Funcionario,Documento,Ativo) values (?,?,?,?,?,?,?,?,?,?,?)";
    private static final String UPDATE_VOLUNTARIO = "update Voluntario set Nome = ?, Profissao = ?, Telefone = ?, DataNascimento = ?, Email = ?, Rua = ?, Localidade = ?, CodPostal = ?, Funcionario = ?, Documento = ?, Ativo = ? where idVoluntario = ?";
    
    private static final String DELETE_VOLUNTARIO = "delete from Voluntario where idVoluntario = ?";
    private static final String DELETE_VOLUNTARIOS = "delete from Voluntario";
    
    private static final String SELECT_VOLUNTARIO_DOC ="select Documento from Voluntario where idVoluntario = ? and Documento is NOT NULL";
    
    private static final String COUNT_VOLUNTARIOS = "select count(*) as n from Voluntario";
   
   
    
    private final ProjectoDAO ProjectoDAO;
    private final EquipaDAO equipaDAO;

    public VoluntarioDAO() {
        this.ProjectoDAO = new ProjectoDAO();
        this.equipaDAO = new EquipaDAO();
    }
    

    public void addVoluntario(Connection connection, Voluntario v) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_VOLUNTARIO;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try{
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);
            
            statement.setString(1, v.getNome());
            statement.setString(2, v.getProf());
            statement.setInt(3, v.getTelf());
            statement.setDate(4, java.sql.Date.valueOf(v.DataNascProperty()));
            statement.setString(5, v.getEmail());
            statement.setString(6, v.getRua());
            statement.setString(7, v.getLocalidade());
            statement.setString(8, v.getCodPostal());
            statement.setInt(9, v.getFuncionario());
            statement.setBlob(10, v.getDoc());
            statement.setBoolean(11, true);
            
            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();
            
            try {
                if(keys.next()) {
                    v.setId(keys.getInt(1));
                }
                else {
                    throw new PersistenceException("Error generating id for Voluntario: " + v);
                }
            }
            finally {
                keys.close();
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error saving Voluntario: " + v, ex);
        }
 
    }

    public Voluntario getVoluntario(Connection connection, int id) throws PersistenceException {
        try {
            Voluntario v;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_VOLUNTARIO);
            statement.setLong(1, id);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    v = new Voluntario();
                    v.setId(result.getInt("idVoluntario"));
                    String n = result.getString("Nome");
                    v.setNome(n);
                    String[] nn = n.split(" ");
                    v.setFirstName(nn[0]);
                    v.setLastName((nn.length > 1)?nn[nn.length-1]:"");
                    v.setProf(result.getString("Profissao"));
                    v.setTelf(result.getInt("Telefone"));
                    v.setDataNasc(result.getDate("DataNascimento"));
                    v.setEmail(result.getString("Email"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    //v.setDoc((result.getBlob("Documento")).getBinaryStream());
                    v.setAtivo(result.getBoolean("Ativo"));
                    v.setProjectos(getProjetosVoluntario(connection,v.getId()));
                    
                    v.setEquipas(getEquipaVoluntario(connection,v.getId()));
                } else {
                    v = null;
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return v;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }
    
    public Voluntario getVoluntarioSem(Connection connection, int idVoluntario) throws PersistenceException {
        try {
            Voluntario v;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_VOLUNTARIO);
            statement.setLong(1, idVoluntario);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    v = new Voluntario();
                    v.setId(result.getInt("idVoluntario"));
                    String n = result.getString("Nome");
                    v.setNome(n);
                    String[] nn = n.split(" ");
                    v.setFirstName(nn[0]);
                    v.setLastName((nn.length > 1)?nn[nn.length-1]:"");
                    v.setProf(result.getString("Profissao"));
                    v.setTelf(result.getInt("Telefone"));
                    v.setDataNasc(result.getDate("DataNascimento"));
                    v.setEmail(result.getString("Email"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    //v.setDoc((result.getBlob("Documento")).getBinaryStream());
                    v.setAtivo(result.getBoolean("Ativo"));
                } else {
                    v = null;
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return v;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }
    
    public ArrayList<Projecto> getProjetosVoluntario(Connection connection, int idVoluntario) throws PersistenceException {
        try {
            ArrayList<Projecto>  projs = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTOSVOLUNTARIO);
            statement.setLong(1, idVoluntario);
            ResultSet result = statement.executeQuery();
            ProjectoDAO p = new ProjectoDAO();
            try {
                while(result.next()) {
                    projs.add(p.getProjecto(connection, result.getInt("Projecto")));
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return projs;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching Voluntarios", ex);
        }
    }
    
    public ArrayList<Equipa> getEquipaVoluntario(Connection connection, int idVoluntario) throws PersistenceException {
        try {
            ArrayList<Equipa> equipas = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPAVOLUNTARIO);
            statement.setLong(1, idVoluntario);
            ResultSet result = statement.executeQuery();
        
            try {
                while(result.next()) {
                    equipas.add(equipaDAO.getEquipa(connection, result.getInt("Equipa")));
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return equipas;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching Voluntarios", ex);
        }
    }
    
    public boolean existeVoluntario(Connection connection, int idVoluntario) throws PersistenceException {
        Voluntario v = getVoluntario(connection, idVoluntario);
        return (v != null);
    }
    
    public void setVoluntario(Connection connection, Voluntario v ) throws PersistenceException {
        try {
                //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
                PreparedStatement statement = connection.prepareStatement(UPDATE_VOLUNTARIO);
                
                try {
                        statement.setString(1, v.getNome());
                        statement.setString(2, v.getProf());
                        statement.setInt(3, v.getTelf());
                        statement.setDate(4, java.sql.Date.valueOf(v.DataNascProperty()));
                        statement.setString(5, v.getEmail());
                        statement.setString(6, v.getRua());
                        statement.setString(7, v.getLocalidade());
                        statement.setString(8, v.getCodPostal());
                        statement.setInt(9, v.getFuncionario());
                        statement.setBlob(10, v.getDoc());
                        statement.setBoolean(11, v.getAtivo());
                        statement.setInt(12, v.getId());
                        
                        statement.executeUpdate();
                    
                }
                finally {
                    statement.close();
                    //connection.close();
                }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET VOLUNTARIO", ex);
        }
        
    }

    public InputStream getVoluntarioDocumento(Connection connection, int idVoluntario) throws PersistenceException{
        try {
            InputStream i;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_VOLUNTARIO);
            statement.setLong(1, idVoluntario);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    i = result.getBlob("Documento").getBinaryStream();
     
                } else {
                    i = null;
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return i;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }
    
    public boolean existeVoluntarioDocumento(Connection connection, int idVoluntario) throws PersistenceException{
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_VOLUNTARIO_DOC);
            statement.setLong(1, idVoluntario);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    return true;
     
                } else {
                    return false;
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }
    
    public ArrayList<Voluntario> getVoluntarios(Connection connection) throws PersistenceException {
        try {
            ArrayList<Voluntario> vols = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_VOLUNTARIOS);
            
            try {
                while(result.next()) {
                    Voluntario v = new Voluntario();
                    v.setId(result.getInt("idVoluntario"));
                    String n = result.getString("Nome");
                    v.setNome(n);
                    String[] nn = n.split(" ");
                    v.setFirstName(nn[0]);
                    v.setLastName((nn.length > 1)?nn[nn.length-1]:"");
                    v.setProf(result.getString("Profissao"));
                    v.setTelf(result.getInt("Telefone"));
                    v.setDataNasc(result.getDate("DataNascimento"));
                    v.setEmail(result.getString("Email"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    //v.setDoc((result.getBlob("Documento")).getBinaryStream());
                    v.setAtivo(result.getBoolean("Ativo"));
                    v.setProjectos(getProjetosVoluntario(connection,v.getId()));
                    v.setEquipas(getEquipaVoluntario(connection,v.getId()));
                    
                    vols.add(v);
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return vols;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching Voluntarios", ex);
        }
    }

    public void remVoluntario(Connection connection, int id) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_VOLUNTARIO);
            
            statement.setInt(1, id);
            
            try {
                statement.executeUpdate();
            }
            finally {
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error Deleting Voluntario ");
        }
    }

    public void deleteAll(Connection connection) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_VOLUNTARIOS);
            
            try {
                statement.executeUpdate();
            }
            finally {
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting VOLUNTARIOS", ex);
        }
    }

    public long count(Connection connection) throws PersistenceException {
        try {
            int count;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(COUNT_VOLUNTARIOS);

            try {
                count = result.getInt("n");
            }
            finally {
                statement.close();
                //connection.close();
            }
            
            return count;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting VOLUNTARIOS", ex);
        }
    }
    
    public ArrayList<Voluntario> getVoluntariosByName(Connection connection, String nome) throws PersistenceException {
        try {   
            ArrayList<Voluntario> vols = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_VOLUNTARIOS_NOME);
            statement.setString(1, "%"+ nome + "%");
            ResultSet result = statement.executeQuery();
            
            try {
                while(result.next()) {
                    Voluntario v = new Voluntario();
                    v.setId(result.getInt("idVoluntario"));
                    String n = result.getString("Nome");
                    v.setNome(n);
                    String[] nn = n.split(" ");
                    v.setFirstName(nn[0]);
                    v.setLastName((nn.length > 1)?nn[nn.length-1]:"");
                    v.setProf(result.getString("Profissao"));
                    v.setTelf(result.getInt("Telefone"));
                    v.setDataNasc(result.getDate("DataNascimento"));
                    v.setEmail(result.getString("Email"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    //v.setDoc((result.getBlob("Documento")).getBinaryStream());
                    v.setAtivo(result.getBoolean("Ativo"));
                    v.setProjectos(getProjetosVoluntario(connection,v.getId()));
                    v.setEquipas(getEquipaVoluntario(connection,v.getId()));
                    
                    vols.add(v);
                    
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return vols;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }
    
}