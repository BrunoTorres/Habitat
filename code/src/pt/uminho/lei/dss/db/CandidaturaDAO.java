package pt.uminho.lei.dss.db;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import pt.uminho.lei.dss.model.Agregado;
import pt.uminho.lei.dss.model.Candidatura;

public final class CandidaturaDAO extends AbstractDAO {

    private static final String SELECT_CANDIDATURAS = "select Nr, Funcionario, EstadoCandidatura, EstadoOrcamento, Orcamento, Rua, Localidade, CodPostal ,Telefone, ObsRejecao, MensalidadeAtribuida, Documento, RendimentoTotal from Candidatura";
    private static final String SELECT_CANDIDATURA = "select Nr, Funcionario, EstadoCandidatura, EstadoOrcamento, Orcamento, Rua, Localidade, CodPostal ,Telefone, ObsRejecao, MensalidadeAtribuida, Documento, RendimentoTotal from Candidatura where Nr = ?";
    private static final String SELECT_CANDIDATURA_DOC = "select Documento from Voluntario where Nr = ? and Documento is NOT NULL";

    private static final String SELECT_AGREGADOS = "select Nif, Nome, DataNascimento, Escolaridade, EstadoCivil, Parentesco, VinculoLaboral, Rendimento1, Profissao, Rendimento2, Candidato, Naturalidade, Nacionalidade from Agregado where Candidatura = ?";
    private static final String SELECT_AGREGADO = "select Nif, Candidatura, Nome, DataNascimento, Escolaridade, EstadoCivil, Parentesco, VinculoLaboral, Rendimento1, Profissao, Rendimento2, Candidato, Naturalidade, Nacionalidade from Agregado where Nif = ?";

//private static final String SELECT_CANDIDATURAS_NOME = "select idCandidatura, Nome, UserName, Password, Permissao, Activo, Email, DataNascimento, Telefone, Nif, Salario, Rua, Localidade, CodPostal, UltimoLogin from Candidatura where nome LIKE ?";
    //private static final String SELECT_CANDIDATURA_USERNAME = "select idCandidatura, Nome, UserName, Password, Permissao, Activo, Email, DataNascimento, Telefone, Nif, Salario, Rua, Localidade, CodPostal, UltimoLogin from Candidatura where UserName LIKE ?";
    //private static final String SELECT_VOLUNTARIOS_CANDIDATURA = "select idCandidatura,Nome,Profissao,Telefone,DataNascimento,Email,Rua,Localidade,CodPostal,Candidatura,Documento from Candidatura where Candidatura = ?";
    private static final String INSERT_CANDIDATURA = "insert into Candidatura (Funcionario, EstadoCandidatura, EstadoOrcamento, Orcamento, Rua, Localidade, CodPostal ,Telefone, ObsRejecao, MensalidadeAtribuida, Documento, RendimentoTotal) values (?,?,?,?,?,?,?,?,?,?,?,?)";
    private static final String INSERT_AGREGADO = "insert into Agregado (Nif, Candidatura, Nome, DataNascimento, Escolaridade, EstadoCivil, Parentesco, VinculoLaboral, Rendimento1, Profissao, Rendimento2, Candidato, Naturalidade, Nacionalidade) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            

    private static final String UPDATE_CANDIDATURA = "update Candidatura set Funcionario = ?, EstadoCandidatura = ?, EstadoOrcamento = ?, Orcamento = ?, Rua = ?, Localidade = ?, CodPostal = ?, Telefone = ?, ObsRejecao = ?, MensalidadeAtribuida = ?, Documento = ?, RendimentoTotal = ? where Nr = ?";
    private static final String UPDATE_AGREGADO = "update Agregado set Candidatura = ?, Nome = ?, DataNascimento = ?, Escolaridade = ?, EstadoCivil = ?, Parentesco = ?, VinculoLaboral = ?, Rendimento1 = ?, Profissao = ?, Rendimento2 = ?, Candidato = ?, Naturalidade = ?, Nacionalidade = ? where Nif = ?";
    private static final String UPDATE_CANDIDATURA_ESTADO = "update Candidatura set EstadoCandidatura = ? where Nr = ?";
    private static final String UPDATE_CANDIDATURA_ESTADO_ORCAMENTO = "update Candidatura set EstadoOrcamento = ? where Nr = ?";

    private static final String DELETE_CANDIDATURA = "delete from Candidatura where Nr = ?";
    private static final String DELETE_AGREGADO = "delete from Agregado where Nif = ?";
    private static final String DELETE_CANDIDATURAS = "delete from Candidatura";

    private static final String COUNT_CANDIDATURAS = "select count(*) as n from Candidatura";

    private static final String SELECT_CANDIDATURAS_NOPROJECT = "select Nr from Candidatura where Nr NOT IN (select Candidatura_Nr from Projecto)";

    //private final HabitatRepository habitatRepository;
    public CandidaturaDAO() {
    }

    CandidaturaDAO(String url, String user, String password) {
        //this.url = url;
        //this.user = user;
        //this.password = password;

        //this.habitatRepository = RepositoryFactory.getHabitatRepository();
    }

    public void addCandidatura(Connection connection, Candidatura v) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_CANDIDATURA;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);

            statement.setInt(1, v.getFuncionario());
            statement.setInt(2, v.getEstadoCandidatura());
            statement.setInt(3, v.getEstadoOrcamento());
            statement.setDouble(4, v.getOrcamento());
            statement.setString(5, v.getRua());
            statement.setString(6, v.getLocalidade());
            statement.setString(7, v.getCodPostal());
            statement.setInt(8, v.getTelefone());
            statement.setString(9, v.getObsRejecao());
            statement.setDouble(10, v.getMensalidadeAtribuida());
            statement.setBlob(11, v.getDocumento());
            statement.setDouble(12, v.getRendimentoTotal());

            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();

            try {
                if (keys.next()) {
                    v.setNr(keys.getInt(1));
                } else {
                    throw new PersistenceException("Error generating id for Candidatura: " + v);
                }
            } finally {
                keys.close();
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error saving Candidatura: " + v, ex);
        }

    }

    public void addAgregado(Connection connection, Agregado v) throws PersistenceException, SQLException {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
        //PreparedStatement statement = connection.prepareStatement(INSERT_AGREGADO);
        String query;

        query = INSERT_AGREGADO;

        try {
            connection.setAutoCommit(false);

            PreparedStatement statement = connection.prepareStatement(query);

            statement.setInt(1, v.getNif());
            statement.setInt(2, v.getCandidatura());
            statement.setString(3, v.getNome());
            statement.setDate(4, java.sql.Date.valueOf(v.getDataNascimento()));
            statement.setString(5, v.getEscolaridade());
            statement.setString(6, v.getEstadoCivil());
            statement.setString(7, v.getParentesco());
            statement.setString(8, v.getVinculoLaboral());
            statement.setDouble(9, v.getRendimento1());
            statement.setString(10, v.getProfissao());
            statement.setDouble(11, v.getRendimento2());
            statement.setInt(12, v.getCandidato());
            statement.setString(13, v.getNaturalidade());
            statement.setString(14, v.getNacionalidade());

            Candidatura c = getCandidatura(connection, v.getCandidatura());
            double rend = c.getRendimentoTotal() + v.getRendimento1() + v.getRendimento2();
            
            c.setRendimentoTotal(rend);
            setCandidatura(connection, c);

            statement.executeUpdate();
            try {
                connection.commit();
                connection.setAutoCommit(true);

            } finally {

                statement.close();
            }

        } catch (SQLException ex) {
             try {
                connection.rollback();
                System.err.println("Erro ao adicionar doação: " + v);
                Logger.getLogger(DoacaoDAO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex1) {
                Logger.getLogger(DoacaoDAO.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }

    }

    public Candidatura getCandidatura(Connection connection, int id) throws PersistenceException {
        try {
            Candidatura v;

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_CANDIDATURA);
            statement.setLong(1, id);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    //Nr, Funcionario, TipoCandidatura, Telefone, ObsRejecao, MensalidadeAtribuida, Documento, RendimentoTotal
                    v = new Candidatura();
                    v.setNr(result.getInt("Nr"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    v.setEstadoCandidatura(result.getInt("EstadoCandidatura"));
                    v.setEstadoOrcamento(result.getInt("EstadoOrcamento"));
                    v.setOrcamento(result.getDouble("Orcamento"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setTelefone(result.getInt("Telefone"));
                    v.setObsRejecao(result.getString("ObsRejecao"));
                    v.setMensalidadeAtribuida(result.getDouble("MensalidadeAtribuida"));
                    v.setDocumento(result.getBinaryStream("Documento"));
                    v.setRendimentoTotal(result.getDouble("RendimentoTotal"));
                    v.setAgregado(getAgregados(connection, v.getNr()));
                } else {
                    v = null;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return v;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL getCandidatura", ex);
        }
    }

    public Agregado getAgregado(Connection connection, int nif) throws PersistenceException {
        try {
            Agregado v;

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_AGREGADO);
            statement.setLong(1, nif);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    //Nr, Funcionario, TipoCandidatura, Telefone, ObsRejecao, MensalidadeAtribuida, Documento, RendimentoTotal
                    v = new Agregado();
                    v.setNif(result.getInt("Nif"));
                    v.setCandidatura(result.getInt("Candidatura"));
                    v.setNome(result.getString("Nome"));
                    v.setDataNascimento(result.getDate("DataNascimento"));
                    v.setEscolaridade(result.getString("Escolaridade"));
                    v.setEstadoCivil(result.getString("EstadoCivil"));
                    v.setParentesco(result.getString("Parentesco"));
                    v.setVinculoLaboral(result.getString("VinculoLaboral"));
                    v.setRendimento1(result.getDouble("Rendimento1"));
                    v.setRendimento2(result.getDouble("Rendimento2"));
                    v.setProfissao(result.getString("Profissao"));
                    v.setCandidato(result.getInt("Candidatu"));
                    v.setNaturalidade(result.getString("Naturalidade"));
                    v.setNacionalidade(result.getString("Nacionalidade"));
                } else {
                    v = null;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return v;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL getCandidatura", ex);
        }
    }

    public boolean existeCandidatura(Connection connection, int id) throws PersistenceException {
        Candidatura v = getCandidatura(connection, id);
        return (v != null);
    }

    public void setCandidatura(Connection connection, Candidatura v) throws PersistenceException {
        try {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_CANDIDATURA);
            //Nr, Funcionario, TipoCandidatura, Telefone, ObsRejecao, MensalidadeAtribuida, Documento, RendimentoTotal
            try {
                statement.setInt(1, v.getFuncionario());
                statement.setInt(2, v.getEstadoCandidatura());
                statement.setInt(3, v.getEstadoOrcamento());
                statement.setDouble(4, v.getOrcamento());
                statement.setString(5, v.getRua());
                statement.setString(6, v.getLocalidade());
                statement.setString(7, v.getCodPostal());
                statement.setInt(8, v.getTelefone());
                statement.setString(9, v.getObsRejecao());
                statement.setDouble(10, v.getMensalidadeAtribuida());
                statement.setBlob(11, v.getDocumento());
                statement.setDouble(12, v.getRendimentoTotal());
                statement.setInt(13, v.getNr());

                statement.executeUpdate();

            } finally {
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET CANDIDATURA", ex);
        }

    }

    public void setAgregado(Connection connection, Agregado v) throws PersistenceException {
        try {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_AGREGADO);
            try {
                statement.setInt(1, v.getCandidatura());
                statement.setString(2, v.getNome());
                statement.setDate(3, java.sql.Date.valueOf(v.getDataNascimento()));
                statement.setString(4, v.getEscolaridade());
                statement.setString(5, v.getEstadoCivil());
                statement.setString(6, v.getParentesco());
                statement.setString(7, v.getVinculoLaboral());
                statement.setDouble(8, v.getRendimento1());
                statement.setString(9, v.getProfissao());
                statement.setDouble(10, v.getRendimento2());
                statement.setInt(11, v.getCandidato());
                statement.setString(12, v.getNaturalidade());
                statement.setString(13, v.getNacionalidade());
                statement.setInt(14, v.getNif());

                statement.executeUpdate();

            } finally {
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET CANDIDATURA", ex);
        }

    }

    public ArrayList<Candidatura> getCandidaturas(Connection connection) throws PersistenceException {
        try {
            ArrayList<Candidatura> vols = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_CANDIDATURAS);

            try {
                while (result.next()) {
                    Candidatura v = new Candidatura();
                    v.setNr(result.getInt("Nr"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    v.setEstadoCandidatura(result.getInt("EstadoCandidatura"));
                    v.setEstadoOrcamento(result.getInt("EstadoOrcamento"));
                    v.setOrcamento(result.getDouble("Orcamento"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setTelefone(result.getInt("Telefone"));
                    v.setObsRejecao(result.getString("ObsRejecao"));
                    v.setMensalidadeAtribuida(result.getDouble("MensalidadeAtribuida"));
                    v.setDocumento(result.getBinaryStream("Documento"));
                    v.setRendimentoTotal(result.getDouble("RendimentoTotal"));
                    v.setAgregado(getAgregados(connection, v.getNr()));

                    vols.add(v);
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return vols;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Candidaturas", ex);
        }
    }

    public ArrayList<Agregado> getAgregados(Connection connection, int idCandidatura) throws PersistenceException {
        try {
            ArrayList<Agregado> agre = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_AGREGADOS);
            statement.setLong(1, idCandidatura);
            ResultSet result = statement.executeQuery();

            try {
                while (result.next()) {
                    Agregado v = new Agregado();
                    v.setNif(result.getInt("Nif"));
                    v.setNome(result.getString("Nome"));
                    v.setDataNascimento(result.getDate("DataNascimento"));
                    v.setEscolaridade(result.getString("Escolaridade"));
                    v.setEstadoCivil(result.getString("EstadoCivil"));
                    v.setParentesco(result.getString("Parentesco"));
                    v.setVinculoLaboral(result.getString("VinculoLaboral"));
                    v.setRendimento1(result.getDouble("Rendimento1"));
                    v.setRendimento2(result.getDouble("Rendimento2"));
                    v.setProfissao(result.getString("Profissao"));
                    v.setCandidato(result.getInt("Candidato"));
                    v.setNaturalidade(result.getString("Naturalidade"));
                    v.setNacionalidade(result.getString("Nacionalidade"));

                    agre.add(v);
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return agre;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Agregados", ex);
        }
    }

    public ArrayList<Integer> getCandidaturasSemProjeto(Connection connection) throws PersistenceException {
        try {
            ArrayList<Integer> candidaturas = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_CANDIDATURAS_NOPROJECT);
            ResultSet result = statement.executeQuery();

            try {
                while (result.next()) {
                    candidaturas.add(result.getInt("Nr"));
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return candidaturas;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Candidaturas Sem Projecto", ex);
        }
    }

    public void setEstadoCandidatura(Connection connection, int id, int estado) throws PersistenceException {
        try {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_CANDIDATURA_ESTADO);

            try {
                statement.setInt(1, estado);
                statement.setInt(2, id);

                ResultSet result = statement.executeQuery();

            } finally {
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET CANDIDATURA", ex);
        }

    }

    public void setEstadoOrcamento(Connection connection, int id, int estado) throws PersistenceException {
        try {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_CANDIDATURA_ESTADO_ORCAMENTO);

            try {
                statement.setInt(1, estado);
                statement.setInt(2, id);

                ResultSet result = statement.executeQuery();

            } finally {
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET CANDIDATURA", ex);
        }
    }

    public boolean remCandidatura(Connection connection, int id) throws PersistenceException {

        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_CANDIDATURA);

            statement.setInt(1, id);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                //connection.close();
            }
            return true;
        } catch (SQLException ex) {
            return false;
        }
    }

    public void remAgregado(Connection connection, int id) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_AGREGADO);

            statement.setInt(1, id);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error Deleting CANDIDATURA ");
        }
    }

    public InputStream getCandidaturaDocumento(Connection connection, int idCandidatura) throws PersistenceException {
        try {
            InputStream i;

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_CANDIDATURA);
            statement.setLong(1, idCandidatura);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    i = result.getBlob("Documento").getBinaryStream();

                } else {
                    i = null;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return i;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL GET CANDIDATURA DOCUMENTO", ex);
        }
    }

    public boolean existeCandidaturaDocumento(Connection connection, int idCandidatura) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_CANDIDATURA_DOC);
            statement.setLong(1, idCandidatura);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    return true;

                } else {
                    return false;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }

    public void deleteAll(Connection connection) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_CANDIDATURAS);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error deleting CANDIDATURAS", ex);
        }
    }

    public long count(Connection connection) throws PersistenceException {
        try {
            long count;

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(COUNT_CANDIDATURAS);

            try {
                count = result.getLong("n");
            } finally {
                statement.close();
                //connection.close();
            }

            return count;
        } catch (SQLException ex) {
            throw new PersistenceException("Error count VOLUNTARIOS");
        }
    }

}
