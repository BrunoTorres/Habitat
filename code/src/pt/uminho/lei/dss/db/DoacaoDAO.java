package pt.uminho.lei.dss.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLType;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import pt.uminho.lei.dss.model.Doacao;

public class DoacaoDAO extends AbstractDAO {

    private static final String SELECT_DOACOES = "select idDoacao, Data, Quantidade, Quantia, Obs, Tipo, Material, Doador, Projecto, Evento from Doacao";
    private static final String SELECT_DOACAO = "select idDoacao, Data, Quantidade, Quantia, Obs, Tipo, Material, Doador, Projecto, Evento from Doacao where idDoacao = ?";
    private static final String SELECT_DOACOES_NOME = "select idDoacao, Data, Quantidade, Quantia, Obs, Tipo, Material, Doador, Projecto, Evento from Doacao where Doador = ?";
    private static final String SELECT_DOACAO_DOADOR = "select idDoacao from Doacao where Doador = ?";
    private static final String SELECT_DOACAO_MATERIAL = "select idDoacao from Doacao where Material = ?";
    
    private static final String INSERT_DOACAO = "insert into Doacao (Data, Quantidade, Quantia, Obs, Tipo, Material, Doador, Projecto, Evento, Funcionario) values (?,?,?,?,?,?,?,?,?,?)";
    private static final String UPDATE_DOACAO = "update Doacao set Data = ?, Quantidade = ?, Quantia = ?, Obs = ?, Tipo = ?, Material = ?, Doador = ?, Projecto = ?, Evento = ? where idDoacao = ?";

    private static final String DELETE_DOACAO = "delete from Doacao where idDoacao = ?";
    private static final String DELETE_DOACOES = "delete from Doacao";

    private static final String COUNT_DOACOES = "select count(*) as n from Doacao";

    private final MaterialDAO matDAO = new MaterialDAO();
    private final EventoDAO evDAO = new EventoDAO();

    public void addDoacao(Connection connection, Doacao d) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_DOACAO;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try {
            connection.setAutoCommit(false);

            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);

            statement.setDate(1, java.sql.Date.valueOf(d.getData()));
            statement.setInt(2, d.getQuantidade());
            statement.setDouble(3, d.getQuantia());
            statement.setString(4, d.getObs());
            statement.setInt(5, d.getTipo());
            if (d.getMaterial() != -1) {
                statement.setInt(6, d.getMaterial());
            } else {
                statement.setNull(6, Types.NULL);
            }
            statement.setInt(7, d.getDoador());
            if (d.getProjeto() != -1) {
                statement.setInt(8, d.getProjeto());
            } else {
                statement.setNull(8, Types.NULL);
            }
            if (d.getEvento() != -1) {
                statement.setInt(9, d.getEvento());
            } else {
                statement.setNull(9, Types.NULL);
            }
            statement.setInt(10, d.getFuncionario());

            //statement.addBatch(query);
            int rows = statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();
            System.err.println("ROWS: " + rows);
            try {
                if (keys.next()) {
                    d.setIdDoacao(keys.getInt(1));

                    if (d.getMaterial() != -1) {
                        this.matDAO.addStock(connection, d.getMaterial(), d.getQuantidade());
                    }
                    if (d.getEvento() != -1) {
                        this.evDAO.addTotal(connection, d.getEvento(), d.getQuantia());
                    }
                    connection.commit();
                    connection.setAutoCommit(true);
                } else {
                    throw new PersistenceException("Error generating id for Doacao: " + d);
                }
            } finally {
                keys.close();
                statement.close();
            }
        } catch (SQLException ex) {
            try {
                connection.rollback();
                System.err.println("Erro ao adicionar doação: " + d);
                Logger.getLogger(DoacaoDAO.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex1) {
                Logger.getLogger(DoacaoDAO.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }

    public Doacao getDoacao(Connection connection, int idDoacao) throws PersistenceException {
        try {
            Doacao d;

            PreparedStatement statement = connection.prepareStatement(SELECT_DOACAO);
            statement.setLong(1, idDoacao);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    d = new Doacao();
                    d.setIdDoacao(result.getInt("idDoador"));
                    d.setFuncionario(result.getInt("Funcionario"));
                    d.setData(result.getDate("Data"));
                    d.setQuantidade(result.getInt("Quantidade"));
                    d.setQuantia(result.getDouble("Quantia"));
                    d.setObs(result.getString("Obs"));
                    d.setTipo(result.getInt("Tipo"));
                    d.setMaterial(result.getInt("Material"));
                    d.setDoador(result.getInt("Doador"));
                    d.setProjeto(result.getInt("Projecto"));
                    d.setEvento(result.getInt("Evento"));

                } else {
                    d = null;
                }
            } finally {
                result.close();
                statement.close();
            }

            return d;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }

    public boolean existeDoacaoDoador(Connection connection, int idDoador) throws PersistenceException {
        try {
            boolean flag = false;
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_DOACAO_DOADOR);
            statement.setLong(1, idDoador);

            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    flag = true;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return flag;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL EXISTE DOACAO DOADOR", ex);
        }
    }

    public List<Doacao> getDoadores(Connection connection) throws PersistenceException {
        try {
            ArrayList<Doacao> doacoes = new ArrayList<>();
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_DOACOES);

            try {
                while (result.next()) {
                    Doacao d = new Doacao();
                    d.setIdDoacao(result.getInt("idDoacao"));
                    d.setFuncionario(result.getInt("Funcionario"));
                    d.setData(result.getDate("Data"));
                    d.setQuantidade(result.getInt("Quantidade"));
                    d.setQuantia(result.getDouble("Quantia"));
                    d.setObs(result.getString("Obs"));
                    d.setTipo(result.getInt("Tipo"));
                    d.setMaterial(result.getInt("Material"));
                    d.setDoador(result.getInt("Doador"));
                    d.setProjeto(result.getInt("Projecto"));
                    d.setEvento(result.getInt("Evento"));

                    doacoes.add(d);
                }
            } finally {
                result.close();
                statement.close();
            }

            return doacoes;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Funcionarios", ex);
        }
    }

    public ArrayList<Doacao> getDoacoes(Connection connection, int idDoador) throws PersistenceException {
        try {
            ArrayList<Doacao> doacoes = new ArrayList<>();
            PreparedStatement statement = connection.prepareStatement(SELECT_DOACOES_NOME);
            statement.setInt(1, idDoador);
            ResultSet result = statement.executeQuery();

            try {
                while (result.next()) {
                    Doacao d = new Doacao();

                    d.setIdDoacao(result.getInt("idDoacao"));
                    // d.setFuncionario(result.getInt("Funcionario"));
                    d.setData(result.getDate("Data"));
                    d.setQuantidade(result.getInt("Quantidade"));
                    d.setQuantia(result.getDouble("Quantia"));
                    d.setObs(result.getString("Obs"));
                    d.setTipo(result.getInt("Tipo"));
                    d.setMaterial(result.getInt("Material"));
                    d.setDoador(result.getInt("Doador"));
                    d.setProjeto(result.getInt("Projecto"));
                    d.setEvento(result.getInt("Evento"));

                    doacoes.add(d);

                }
            } finally {
                result.close();
                statement.close();
            }

            return doacoes;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL DOACOES By Doador", ex);
        }
    }
    
    public int hashCode() {
        int lHashCode = 0;
        if (lHashCode == 0) {
            lHashCode = super.hashCode();
        }
        return lHashCode;
    }

    public boolean equals(Object object) {
        if (this == object) {
            return true;
        } else if (object instanceof DoacaoDAO) {
            DoacaoDAO lDoacaoDAOObject = (DoacaoDAO) object;
            boolean lEquals = true;
            return lEquals;
        }
        return false;
    }
}
