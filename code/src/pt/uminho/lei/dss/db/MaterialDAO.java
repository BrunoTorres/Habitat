package pt.uminho.lei.dss.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import static pt.uminho.lei.dss.db.AbstractDAO.getPassword;
import static pt.uminho.lei.dss.db.AbstractDAO.getURL;
import static pt.uminho.lei.dss.db.AbstractDAO.getUser;
import pt.uminho.lei.dss.model.Material;

public class MaterialDAO {

    private static final String SELECT_MATERIAIS_STOCK = "select idMaterial,Quantidade,Nome,Funcionario from Material where Quantidade != 0";
    private static final String SELECT_MATERIAIS_SEMSTOCK = "select idMaterial,Quantidade,Nome,Funcionario from Material where Quantidade = 0";
    private static final String SELECT_MATERIAL = "select idMaterial,Quantidade,Nome,Funcionario from Material where idMaterial = ?";
    private static final String SELECT_MATERIAIS_NOME_STOCK = "select idMaterial,Quantidade,Nome,Funcionario from Material where Nome LIKE ? and Quantidade != 0";
    private static final String SELECT_MATERIAIS_NOME_S_STOCK = "select idMaterial,Quantidade,Nome,Funcionario from Material where Nome LIKE ? and Quantidade = 0";

    private static final String SELECT_MATERIAL_NOME = "select idMaterial,Quantidade,Nome,Funcionario from Material where Nome = ?";
    //private static final String SELECT_PROJECTOSMATERIAL = "select Projecto, Material from ProjectoMaterial where Material = ?";
    //private static final String SELECT_EQUIPAMATERIAL = "select idMaterial,Nome,Funcionario from EquipaMaterial where Material = ?";

    private static final String INSERT_MATERIAL = "INSERT INTO Material (Quantidade,Nome,Funcionario)VALUES(?,?,?);";
    private static final String INSERT_MATERIALPROJECTO = "INSERT INTO MaterialProjecto (Material,Projecto,Concluida,DataFinal,DataInicial)VALUES(?,?,?,?,?)";

    private static final String UPDATE_MATERIAL = "update Material set Quantidade = ?, Nome = ?, Funcionario = ? where idMaterial = ?";
    private static final String UPDATE_QUANTIDADE_MATERIAL = "update Material set Quantidade = Quantidade + ? where idMaterial = ?";

    private static final String DELETE_MATERIAL = "delete from Material where idMaterial = ?";
    private static final String DELETE_MATERIAIS = "delete from Material";

    private static final String COUNT_MATERIAIS = "select count(*) as n from Material";

    public MaterialDAO() {
    }

    public void addStock(Connection connection, int idMaterial, int quant) throws PersistenceException, SQLException {
        PreparedStatement st = connection.prepareStatement(UPDATE_QUANTIDADE_MATERIAL);
        try {
            st.setInt(1, quant);
            st.setInt(2, idMaterial);

            int rowsChanged = st.executeUpdate();
        } finally {
            st.close();
        }
    }

    public Material getMaterial(Connection connection, int idMaterial) throws PersistenceException {
        try {
            Material m;
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAL);
            statement.setLong(1, idMaterial);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    m = new Material();
                    m.setIdMaterial(result.getInt("idMaterial"));
                    m.setNome(result.getString("Nome"));
                    m.setFuncionario(result.getInt("Funcionario"));

                } else {
                    m = null;
                }
            } finally {
                result.close();
                statement.close();
            }

            return m;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }

    public void addMaterial(Material m) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_MATERIAL;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try {
            Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);

            statement.setInt(1, m.getQuantidade());
            statement.setString(2, m.getNome());
            statement.setInt(3, m.getFuncionario());

            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();

            try {
                if (keys.next()) {
                    m.setIdMaterial(keys.getInt(1));
                } else {
                    throw new PersistenceException("Error generating id for Material: " + m);
                }
            } finally {
                keys.close();
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error saving Material: " + m, ex);
        }
    }

    public boolean existeMaterial(Connection c, Material m) throws PersistenceException {
        Material v = getMaterial(c, m.getIdMaterial());
        return (v != null);
    }

    public boolean existeMaterial(Connection connection, String nomeMat) throws PersistenceException {
        boolean exist;
        try {
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAL_NOME);
            statement.setString(1, nomeMat);
            ResultSet result = statement.executeQuery();
            exist = result.next();
            result.close();
            statement.close();

            return exist;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL Materiais", ex);
        }
    }

    public List<Material> getMaterialbyNameSem(Connection connection, String nomeM) throws PersistenceException {
        try {
            ArrayList<Material> mats = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAIS_NOME_S_STOCK);
            statement.setString(1, "%" + nomeM + "%");
            ResultSet result = statement.executeQuery();

            try {
                while (result.next()) {
                    Material t = new Material();
                    t.setIdMaterial(result.getInt("idMaterial"));
                    t.setQuantidade(result.getInt("Quantidade"));
                    t.setNome(result.getString("Nome"));
                    t.setFuncionario(result.getInt("Funcionario"));

                    mats.add(t);

                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return mats;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL Tarefas", ex);
        }
    }

    public List<Material> getMaterialbyName(Connection connection, String nomeM) throws PersistenceException {
        try {
            ArrayList<Material> mats = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAIS_NOME_STOCK);
            statement.setString(1, "%" + nomeM + "%");
            ResultSet result = statement.executeQuery();

            try {
                while (result.next()) {
                    Material t = new Material();
                    t.setIdMaterial(result.getInt("idMaterial"));
                    t.setQuantidade(result.getInt("Quantidade"));
                    t.setNome(result.getString("Nome"));
                    t.setFuncionario(result.getInt("Funcionario"));

                    mats.add(t);

                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return mats;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL Tarefas", ex);
        }
    }

    public List<Material> getStock(Connection connection) throws PersistenceException {
        try {
            ArrayList<Material> mats = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_MATERIAIS_STOCK);

            try {
                while (result.next()) {
                    Material t = new Material();
                    t.setIdMaterial(result.getInt("idMaterial"));
                    t.setQuantidade(result.getInt("Quantidade"));
                    t.setNome(result.getString("Nome"));
                    t.setFuncionario(result.getInt("Funcionario"));

                    mats.add(t);

                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return mats;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL STOCK", ex);
        }
    }

    public List<Material> getSemStock(Connection connection) throws PersistenceException {
        try {
            ArrayList<Material> mats = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_MATERIAIS_SEMSTOCK);

            try {
                while (result.next()) {
                    Material t = new Material();
                    t.setIdMaterial(result.getInt("idMaterial"));
                    t.setQuantidade(result.getInt("Quantidade"));
                    t.setNome(result.getString("Nome"));
                    t.setFuncionario(result.getInt("Funcionario"));

                    mats.add(t);

                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return mats;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SEM STOCK", ex);
        }
    }

    public void remStock(Connection connection, int idMaterial, int quant) throws PersistenceException {
        Material m = getMaterial(connection, idMaterial);
        if (m.getQuantidade() >= quant) {
            int q = m.getQuantidade() - quant;
            m.setQuantidade(q);
            setMaterial(connection, m);
        }
    }

    public void setMaterial(Connection connection, Material m) throws PersistenceException {
        try {
            PreparedStatement statement = connection.prepareStatement(UPDATE_MATERIAL);

            try {
                statement.setInt(1, m.getQuantidade());
                statement.setString(2, m.getNome());
                statement.setInt(3, m.getFuncionario());
                statement.setInt(4, m.getIdMaterial());

                statement.executeUpdate();

            } finally {
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET VOLUNTARIO", ex);
        }
    }

    public int hashCode() {
        int lHashCode = 0;
        if (lHashCode == 0) {
            lHashCode = super.hashCode();
        }
        return lHashCode;
    }

    public boolean equals(Object object) {
        if (this == object) {
            return true;
        } else if (object instanceof MaterialDAO) {
            MaterialDAO lMaterialDAOObject = (MaterialDAO) object;
            boolean lEquals = true;
            return lEquals;
        }
        return false;
    }
}
