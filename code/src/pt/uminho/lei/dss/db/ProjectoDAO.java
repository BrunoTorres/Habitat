package pt.uminho.lei.dss.db;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import pt.uminho.lei.dss.model.Doador;
import pt.uminho.lei.dss.model.Material;
import pt.uminho.lei.dss.model.Projecto;
import pt.uminho.lei.dss.model.Tarefa;
import pt.uminho.lei.dss.model.Voluntario;

public final class ProjectoDAO extends AbstractDAO {

    private static final String SELECT_PROJECTOS = "select idProjecto, Nome, CustoEstimado, CustoFinal, DataInicial, DataFinal, NumTarefas, PercentagemConcluida, TarefasConcluidas, Rua, Localidade, CodPostal, Funcionario, Candidatura_Nr, Estado from Projecto";
    private static final String SELECT_PROJECTO = "select idProjecto, Nome, CustoEstimado, CustoFinal, DataInicial, DataFinal, NumTarefas, PercentagemConcluida, TarefasConcluidas, Rua, Localidade, CodPostal, Funcionario, Candidatura_Nr, Estado from Projecto where idProjecto = ?";
    private static final String SELECT_PROJECTOS_NOME = "select idProjecto, Nome, CustoEstimado, CustoFinal, DataInicial, DataFinal, NumTarefas, PercentagemConcluida, TarefasConcluidas, Rua, Localidade, CodPostal, Funcionario, Candidatura_Nr, Estado from Projecto where Nome LIKE ?";
    private static final String SELECT_PROJECTOSVOLUNTARIO = "select Projecto, Voluntario from ProjectoVoluntario where Projecto = ?";

    private static final String SELECT_PROJECTOSDOADORES = "select distinct Projecto, Doador from Doacao where Projecto = ?";

    private static final String SELECT_TAREFASPROJECTOS = "select Tarefa, Concluida, DataFinal, DataInicial from TarefaProjecto where Projecto = ?";
    //private static final String SELECT_PROJECTO_USERNAME = "select idProjecto, Nome, UserName, Password, Permissao, Activo, Email, DataNascimento, Telefone, Nif, Salario, Rua, Localidade, CodPostal, UltimoLogin from Projecto where UserName LIKE ?";

    //private static final String SELECT_VOLUNTARIOS_PROJECTO = "select idProjecto,Nome,Profissao,Telefone,DataNascimento,Email,Rua,Localidade,CodPostal,Projecto,Documento from Projecto where Projecto = ?";
    private static final String INSERT_PROJECTO = "insert into Projecto (Nome, CustoEstimado, CustoFinal, DataInicial, DataFinal, NumTarefas, PercentagemConcluida, TarefasConcluidas, Rua, Localidade, CodPostal, Funcionario, Candidatura_Nr, Estado) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    private static final String INSERT_PROJECTOVOLUNTARIO = "insert into ProjectoVoluntario (Projecto, Voluntario) values (?,?)";

    private static final String UPDATE_PROJECTO = "update Projecto set Nome = ?, CustoEstimado = ?, CustoFinal = ?, DataInicial = ?, DataFinal = ?, NumTarefas = ?, PercentagemConcluida = ?, TarefasConcluidas = ?, Rua = ?, Localidade = ?, CodPostal = ?, Funcionario = ?, Candidatura_Nr = ?, Estado = ? where idProjecto = ?";
    private static final String UPDATE_PROJECTO_ESTADO = "update Projecto set Estado = ? where idProjecto = ?";

    private static final String DELETE_PROJECTO = "delete from Projecto where idProjecto = ?";
    private static final String DELETE_PROJECTOVOLUNTARIO = "delete from ProjectoVoluntario where Projecto = ? and Voluntario = ?";
    private static final String DELETE_PROJECTOS = "delete from Projecto";

    private static final String COUNT_PROJECTOS = "select count(*) as n from Projecto";
    
    private static final String INSERT_MATERIAL_PROJETO = "insert into ProjectoMaterial (Projecto, Material) values (?, ?)";
    private static final String DELETE_MATERIAL_PROJETO = "delete from ProjectoMaterial where Projecto = ? and Material = ?";
    private static final String SELECT_MATERIAIS_PROJETO = "select * from ProjectoMaterial where Projecto = ?";

    public ProjectoDAO() {

    }

    ProjectoDAO(String url, String user, String password) {

        //this.habitatRepository = RepositoryFactory.getHabitatRepository();
    }

    public void addProjecto(Connection connection,Projecto v) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_PROJECTO;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);
            // idProjecto, Nome, CustoEstimado, CustoFinal, DataInicial, DataFinal, NumTarefas, PercentagemConcluida, TarefasConcluidas, Rua, Localidade, CodPostal, Funcionario, Candidatura_Nr, Estado
            statement.setString(1, v.getNome());
            statement.setDouble(2, v.getCustoEstimado());
            statement.setDouble(3, v.getCustoFinal());
            statement.setDate(4, java.sql.Date.valueOf(v.getDataInicial()));
            statement.setDate(5, java.sql.Date.valueOf(v.getDataFinal()));
            statement.setInt(6, v.getNumTarefas());
            statement.setInt(7, v.getPercentagemConcluida());
            statement.setInt(8, v.getTarefasConcluidas());
            statement.setString(9, v.getRua());
            statement.setString(10, v.getLocalidade());
            statement.setString(11, v.getCodPostal());
            statement.setInt(12, v.getFuncionario());
            statement.setInt(13, v.getCandidatura_Nr());
            statement.setInt(14, v.getEstado());

            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();

            try {
                if (keys.next()) {
                    v.setIdProjecto(keys.getInt(1));
                } else {
                    throw new PersistenceException("Error generating id for Projecto: " + v);
                }
            } finally {
                keys.close();
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error saving Projecto: " + v, ex);
        }

    }

    public Projecto getProjecto(Connection connection,int id) throws PersistenceException {
        try {
            Projecto v;

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTO);
            statement.setLong(1, id);
            ResultSet result = statement.executeQuery();

            try {
                if (result.next()) {
                    // idProjecto, Nome, CustoEstimado, CustoFinal, DataInicial, DataFinal, NumTarefas, PercentagemConcluida, TarefasConcluidas, Rua, Localidade, CodPostal, Funcionario, Candidatura_Nr, Estado

                    v = new Projecto();
                    v.setIdProjecto(result.getInt("idProjecto"));
                    v.setNome(result.getString("Nome"));
                    v.setCustoEstimado(result.getDouble("CustoEstimado"));
                    v.setCustoFinal(result.getDouble("CustoFinal"));
                    v.setDataInicial(result.getDate("DataInicial"));
                    v.setDataFinal(result.getDate("DataFinal"));
                    v.setNumTarefas(result.getInt("NumTarefas"));
                    v.setPercentagemConcluida(result.getInt("PercentagemConcluida"));
                    v.setTarefasConcluidas(result.getInt("TarefasConcluidas"));
                    v.setRua(result.getString("Rua"));
                    v.setLocalidade(result.getString("Localidade"));
                    v.setCodPostal(result.getString("CodPostal"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    v.setCandidatura_Nr(result.getInt("Candidatura_Nr"));
                    v.setEstado(result.getInt("Estado"));
                    v.setVoluntarios(getProjectoVoluntario(connection,v.getIdProjecto()));
                    v.setDoadores(getProjectoDoador(connection, v.getIdProjecto()));

                    //v.setTarefas(this.getTarefasProjectos(v.getIdProjecto()));
                } else {
                    v = null;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return v;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }

    private ArrayList<Voluntario> getProjectoVoluntario(Connection connection, int idProjecto) throws PersistenceException {
        try {
            ArrayList<Voluntario> vols = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTOSVOLUNTARIO);
            statement.setLong(1, idProjecto);
            ResultSet result = statement.executeQuery();
            VoluntarioDAO voluntariodao = new VoluntarioDAO();
            try {
                while (result.next()) {
                    Voluntario v = voluntariodao.getVoluntarioSem(connection, result.getInt("Voluntario"));
                    vols.add(v);
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return vols;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Projectos", ex);
        }
    }

    /////////GET DOADOR nao funcionar?!
    private ArrayList<Doador> getProjectoDoador(Connection connection, int idProjecto) throws PersistenceException {
        try {
            ArrayList<Doador> doadores = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTOSDOADORES);
            statement.setLong(1, idProjecto);
            ResultSet result = statement.executeQuery();
            DoadorDAO doadordao = new DoadorDAO();
            try {
                while (result.next()) {
                    Doador d = doadordao.getDoador(connection, result.getInt("Doador"));
                    doadores.add(d);
                }
            } finally {
                result.close();
                statement.close();
            }

            return doadores;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Projectos", ex);
        }
    }

    public boolean existeProjecto(Connection connection, int id) throws PersistenceException {
        Projecto v = getProjecto(connection, id);
        return (v != null);
    }

    public void setProjecto(Connection connection, Projecto v) throws PersistenceException {
        try {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_PROJECTO);

            try {
                statement.setString(1, v.getNome());
                statement.setDouble(2, v.getCustoEstimado());
                statement.setDouble(3, v.getCustoFinal());
                statement.setDate(4, java.sql.Date.valueOf(v.getDataInicial()));
                statement.setDate(5, java.sql.Date.valueOf(v.getDataFinal()));
                statement.setInt(6, v.getNumTarefas());
                statement.setInt(7, v.getPercentagemConcluida());
                statement.setInt(8, v.getTarefasConcluidas());
                statement.setString(9, v.getRua());
                statement.setString(10, v.getLocalidade());
                statement.setString(11, v.getCodPostal());
                statement.setInt(12, v.getFuncionario());
                statement.setInt(13, v.getCandidatura_Nr());
                statement.setInt(14, v.getEstado());
                statement.setInt(15, v.getIdProjecto());

                statement.executeUpdate();

            } finally {
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET VOLUNTARIO", ex);
        }

    }

    public ArrayList<Projecto> getProjectos(Connection connection) throws PersistenceException {
        try {
            ArrayList<Projecto> projs = new ArrayList<>();
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_PROJECTOS);

            try {
                while (result.next()) {
                    Projecto p = new Projecto();
                    p.setIdProjecto(result.getInt("idProjecto"));
                    p.setNome(result.getString("Nome"));
                    p.setCustoEstimado(result.getDouble("CustoEstimado"));
                    p.setCustoFinal(result.getDouble("CustoFinal"));
                    p.setDataInicial(result.getDate("DataInicial"));
                    p.setDataFinal(result.getDate("DataFinal"));
                    p.setNumTarefas(result.getInt("NumTarefas"));
                    p.setPercentagemConcluida(result.getInt("PercentagemConcluida"));
                    p.setTarefasConcluidas(result.getInt("TarefasConcluidas"));
                    p.setRua(result.getString("Rua"));
                    p.setLocalidade(result.getString("Localidade"));
                    p.setCodPostal(result.getString("CodPostal"));
                    p.setFuncionario(result.getInt("Funcionario"));
                    p.setCandidatura_Nr(result.getInt("Candidatura_Nr"));
                    p.setEstado(result.getInt("Estado"));
                    p.setVoluntarios(getProjectoVoluntario(connection, p.getIdProjecto()));
                    p.setDoadores(getProjectoDoador(connection, p.getIdProjecto()));

                    projs.add(p);
                }
            } finally {
                result.close();
                statement.close();
            }

            return projs;
        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Projectos", ex);
        }
    }

    /// FEITA SEM TESTE
    public ArrayList<Tarefa> getTarefasProjecto(Connection connection, int idProjecto) throws PersistenceException {
        try {
            ArrayList<Tarefa> tarefas = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_TAREFASPROJECTOS);
            statement.setLong(1, idProjecto);
            ResultSet result = statement.executeQuery();
            TarefaDAO tarefaDao = new TarefaDAO();
            try {
                while (result.next()) {
                    Tarefa t = tarefaDao.getTarefa(connection, result.getInt("Tarefa"));
                    t.setDataInicial(result.getDate("DataInicial"));
                    t.setDataFinal(result.getDate("DataFinal"));
                    t.setConcluida(result.getBoolean("Concluida"));
                    
                    tarefas.add(t);
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }
            return tarefas;

        } catch (SQLException ex) {
            throw new PersistenceException("Error fetching Projectos", ex);
        }

    }

    public boolean remProjecto(Connection connection, int id) throws PersistenceException {
        try {
            PreparedStatement statement = connection.prepareStatement(DELETE_PROJECTO);

            statement.setInt(1, id);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
               
              
            }
             return true;
        } catch (SQLException ex) {
            return false;
        }
        
    }

    public void remVoluntarioProjecto(Connection connection, int idprojecto, int idvoluntario) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_PROJECTOVOLUNTARIO);

            statement.setInt(1, idprojecto);
            statement.setInt(2, idvoluntario);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error Deleting PROJECTOVOLUNTARIO ");
        }
    }

    public void deleteAll(Connection connection) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_PROJECTOS);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error deleting PROJECTOS", ex);
        }
    }

    public long count(Connection connection) throws PersistenceException {
        try {
            long count;

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(COUNT_PROJECTOS);

            try {
                count = result.getLong("n");
            } finally {
                statement.close();
                //connection.close();
            }

            return count;
        } catch (SQLException ex) {
            throw new PersistenceException("Error count VOLUNTARIOS");
        }
    }

    public ArrayList<Projecto> getProjectosByName(Connection connection, String nome) throws PersistenceException {
        try {
            ArrayList<Projecto> projs = new ArrayList<>();
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTOS_NOME);
            statement.setString(1, "%" + nome + "%");
            ResultSet result = statement.executeQuery();

            try {
                while (result.next()) {
                    Projecto p = new Projecto();
                    p.setIdProjecto(result.getInt("idProjecto"));
                    p.setNome(result.getString("Nome"));
                    p.setCustoEstimado(result.getInt("CustoEstimado"));
                    p.setCustoFinal(result.getInt("CustoFinal"));
                    p.setDataInicial(result.getDate("DataInicial"));
                    p.setDataFinal(result.getDate("DataFinal"));
                    p.setNumTarefas(result.getInt("NumTarefas"));
                    p.setPercentagemConcluida(result.getInt("PercentagemConcluida"));
                    p.setTarefasConcluidas(result.getInt("TarefasConcluidas"));
                    p.setRua(result.getString("Rua"));
                    p.setLocalidade(result.getString("Localidade"));
                    p.setCodPostal(result.getString("CodPostal"));
                    p.setFuncionario(result.getInt("Funcionario"));
                    p.setCandidatura_Nr(result.getInt("Candidatura_Nr"));
                    p.setEstado(result.getInt("Estado"));

                    projs.add(p);

                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return projs;
        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL VOLUNTARIOS", ex);
        }
    }

    public void setEstadoProjecto(Connection connection, int id, int estado) throws PersistenceException {
        try {

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_PROJECTO_ESTADO);

            try {
                statement.setInt(1, estado);
                statement.setInt(2, id);

                ResultSet result = statement.executeQuery();

            } finally {
                statement.close();
                //connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET PROJECTO ESTADO", ex);
        }

    }

    public void addVoluntarioProjecto(Connection connection, int idprojeto, int idvoluntario) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_PROJECTOVOLUNTARIO;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);
            statement.setInt(1, idprojeto);
            statement.setInt(2, idvoluntario);

            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();

            try {
                if (keys.next()) {
                    //v.setIdProjecto(keys.getInt(1));
                } else {
                    //throw new PersistenceException("Error generating id for ProjectoVoluntario: ");
                }
            } finally {
                keys.close();
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error saving ProjectoVoluntario: ", ex);
        }

    }
    
    public ArrayList<Material> getMateriaisProjeto(Connection connection, int idProjeto) throws PersistenceException{
        try {
            ArrayList<Material> mats = new ArrayList<>();

            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAIS_PROJETO);
            statement.setInt(1, idProjeto);
            ResultSet result = statement.executeQuery();
            MaterialDAO matDAO = new MaterialDAO();
            try {
                while (result.next()) {
                    Material m = matDAO.getMaterial(connection, result.getInt("Material"));
                    
                    mats.add(m);
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }
            return mats;

        } catch (SQLException ex) {
            throw new PersistenceException("Erro a procurar materiais do projeto", ex);
        }
    }
    
    public void addMaterialProjeto(Connection connection, int idProjeto, Material m) throws PersistenceException{
        int autoGeneratedKeys;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try{
            PreparedStatement statement = connection.prepareStatement(INSERT_MATERIAL_PROJETO, autoGeneratedKeys);
            
            statement.setInt(1, idProjeto);
            statement.setInt(2, m.getIdMaterial());
            
            
            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();
            
            try {
                if(keys.next()) {
                    m.setIdMaterial(keys.getInt(1));
                }
            }
            finally {
                keys.close();
                statement.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error saving ProjectoMaterial: " + m, ex);
        }
    }
    
    public void remMaterialProjeto(Connection connection, int idProjeto, int idMaterial) throws PersistenceException{
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_MATERIAL_PROJETO);

            statement.setInt(1, idProjeto);
            statement.setInt(2, idMaterial);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                //connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error Deleting PROJETOMATERIAL ");
        }
    }
}
