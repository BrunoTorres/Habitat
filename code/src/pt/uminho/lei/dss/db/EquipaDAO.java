package pt.uminho.lei.dss.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import pt.uminho.lei.dss.model.Equipa;
import pt.uminho.lei.dss.model.Voluntario;

public final class EquipaDAO extends AbstractDAO{
    
    private static final String SELECT_EQUIPAS = "select idEquipa, Nome, Pais, Funcionario from Equipa";
    private static final String SELECT_EQUIPA = "select idEquipa, Nome, Pais, Funcionario from Equipa where idEquipa = ?";
    private static final String SELECT_EQUIPAS_NOME = "select idEquipa, Nome, Pais, Funcionario from Equipa where Nome LIKE ?";
    private static final String SELECT_PAISES = "select Nome from Pais";
    private static final String SELECT_PAIS_NOME = "select idPaís from Pais where Nome LIKE ?";
    
    private static final String INSERT_EQUIPA = "insert into Equipa (Nome, Pais, Funcionario) values (?,?,?)";
    private static final String UPDATE_EQUIPA = "update Equipa set Nome = ?, Pais = ?, Funcionario = ? where idEquipa = ?";
    
    private static final String DELETE_EQUIPA = "delete from Equipa where idEquipa = ?";
    private static final String DELETE_EQUIPAS = "delete from Equipa";
    
    private static final String COUNT_EQUIPAS = "select count(*) as n from Equipa";
   
    //EquipaVoluntario
    private static final String SELECT_EQUIPAVOLUNTARIO_ACTIVO = "select Equipa, Voluntario, Activa from EquipaVoluntario where Voluntario = ? and Activa = 1";
    private static final String SELECT_EQUIPAVOLUNTARIO_EXISTE = "select Equipa, Voluntario, Activa from EquipaVoluntario where Voluntario = ? and Equipa = ?";
    private static final String SELECT_EQUIPAVOLUNTARIO_EQUIPA = "select Voluntario from EquipaVoluntario where Equipa = ? AND Activa = 1";
    private static final String INSERT_EQUIPAVOLUNTARIO = "INSERT INTO EquipaVoluntario (`Equipa`,`Voluntario`,`Activa`) VALUES(?,?,1)";
    private static final String UPDATE_EQUIPAVOLUNTARIO_ATIVAR = "update EquipaVoluntario set Activa = 1 where Voluntario = ? and Equipa = ?";
    private static final String UPDATE_EQUIPAVOLUNTARIO_DESATIVAR = "update EquipaVoluntario set Activa = 0 where Voluntario = ?";
    private static final String DELETE_EQUIPAVOLUNTARIO_EQUIPA = "delete from EquipaVoluntario where Equipa = ?";
    
    
    public EquipaDAO() {
        
        //this.habitatRepository = RepositoryFactory.getHabitatRepository();
        
    }

    EquipaDAO(String url, String user, String password) {
    }

    public void addEquipa(Connection connection, Equipa v) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        query = INSERT_EQUIPA;
        autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        try{
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys);
            
            statement.setString(1, v.getNome());
            statement.setInt(2, v.getPais());
            statement.setInt(3, v.getFuncionario());
                     
            statement.executeUpdate();
            ResultSet keys = statement.getGeneratedKeys();
            
            try {
                if(keys.next()) {
                    v.setIdEquipa(keys.getInt(1));
                }
                else {
                    throw new PersistenceException("Error generating id for Equipa: " + v);
                }
            }
            finally {
                keys.close();
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error saving Equipa: " + v, ex);
        }
 
    }

    public Equipa getEquipa(Connection connection, int id) throws PersistenceException {
        try {
            Equipa v;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPA);
            statement.setLong(1, id);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    v = new Equipa();
                    v.setIdEquipa(result.getInt("idEquipa"));
                    v.setNome(result.getString("Nome"));
                    v.setPais(result.getInt("Pais"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    /*
                    int ativa = getEquipaActiva(connection, get);
                    System.out.println("EQUIPA:"+v.getIdEquipa()+" ATIVA:"+ativa);
                    v.setAtiva((v.getIdEquipa()==ativa));
                    */
                } else {
                    v = null;
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return v;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL EQUIPAS", ex);
        }
    }
    
    public boolean existeEquipa(Connection connection, int id) throws PersistenceException {
        Equipa v = getEquipa(connection,id);
        return (v != null);
    }
    
    public void setEquipa(Connection connection, Equipa v ) throws PersistenceException {
        try {
                //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
                PreparedStatement statement = connection.prepareStatement(UPDATE_EQUIPA);
                
                try {
                        statement.setString(1, v.getNome());
                        statement.setInt(2, v.getPais());
                        statement.setInt(3, v.getFuncionario());
                        
                        statement.executeUpdate();
                    
                }
                finally {
                    statement.close();
                    //connection.close();
                }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL SET EQUIPA", ex);
        }
        
    }

    public ArrayList<Equipa> getEquipas(Connection connection) throws PersistenceException {
        try {
            ArrayList<Equipa> vols = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_EQUIPAS);
            
            try {
                while(result.next()) {
                    Equipa v = new Equipa();
                    v.setIdEquipa(result.getInt("idEquipa"));
                    v.setNome(result.getString("Nome"));
                    v.setPais(result.getInt("Pais"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    
                    vols.add(v);
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return vols;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching Equipas", ex);
        }
    }

    public ArrayList<String> getPaises(Connection connection) throws PersistenceException {
        try {
            ArrayList<String> paises = new ArrayList<>();
            
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(SELECT_PAISES);
            
            try {
                while(result.next()) {
                    paises.add(result.getString("Nome"));
                }
            }
            finally {
                result.close();
                statement.close();
            }
            
            return paises;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error fetching Paises", ex);
        }
    }

    public int getPaisId(Connection connection, String nome) throws PersistenceException {
        try {
            int v;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_PAIS_NOME);
            statement.setString(1, nome);
            ResultSet result = statement.executeQuery();
            
            try {
                if(result.next()) {
                    v = result.getInt("idPaís");
                } else {
                    v = 0;
                }
            }
            finally {
                result.close();
                statement.close();
            }
            
            return v;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL EQUIPAS", ex);
        }
    }
    
    public void remEquipa(Connection connection, int id) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_EQUIPA);
            PreparedStatement statement2 = connection.prepareStatement(DELETE_EQUIPAVOLUNTARIO_EQUIPA);
            
            statement.setInt(1, id);
            statement2.setInt(1, id);
            
            try {
                statement2.executeUpdate();
                statement.executeUpdate();
            }
            finally {
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error Deleting Equipa ");
        }
    }

    public void deleteAll(Connection connection) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(DELETE_EQUIPAS);
            
            try {
                statement.executeUpdate();
            }
            finally {
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting EQUIPAS", ex);
        }
    }

    public long count(Connection connection) throws PersistenceException {
        try {
            int count;
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            Statement statement = connection.createStatement();
            ResultSet result = statement.executeQuery(COUNT_EQUIPAS);

            try {
                count = result.getInt("n");
            }
            finally {
                statement.close();
                //connection.close();
            }
            
            return count;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting EQUIPAS", ex);
        }
    }
    
    public ArrayList<Equipa> getEquipasByName(Connection connection, String nome) throws PersistenceException {
        try {
            ArrayList<Equipa> vols = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPAS_NOME);
            statement.setString(1, "%"+nome+"%");
            ResultSet result = statement.executeQuery();
            try {
                while(result.next()) {
                    Equipa v = new Equipa();
                    v.setIdEquipa(result.getInt("idEquipa"));
                    v.setNome(result.getString("Nome"));
                    v.setPais(result.getInt("Pais"));
                    v.setFuncionario(result.getInt("Funcionario"));
                    
                    vols.add(v);
                    
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return vols;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL EQUIPAS", ex);
        }
    }
    
    public ArrayList<Voluntario> getEquipaVoluntarios(Connection connection, int idEquipa) throws PersistenceException {
        try {
            ArrayList<Voluntario> vols = new ArrayList<>();
            
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPAVOLUNTARIO_EQUIPA);
            statement.setInt(1, idEquipa);
            ResultSet result = statement.executeQuery();
            try {
                VoluntarioDAO voluntariodao = new VoluntarioDAO();
                while(result.next()) {
                    vols.add(voluntariodao.getVoluntarioSem(connection, result.getInt("Voluntario")));
                }
            }
            finally {
                result.close();
                statement.close();
                //connection.close();
            }
            
            return vols;
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error SQL EQUIPAS", ex);
        }
    }
    
    private boolean temEquipaActiva(Connection connection, int idvol) throws PersistenceException{
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPAVOLUNTARIO_ACTIVO);
            statement.setInt(1, idvol);
            ResultSet result = statement.executeQuery();
            boolean flag = false;
            try {
                if (result.next()) {
                    flag = true;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return flag;
        } catch (SQLException ex) {
            throw new PersistenceException("Error Update VoluntarioEquipa ");
        }
    }
    
    public void desativaEquipaActiva(Connection connection, int idvol) throws PersistenceException{
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(UPDATE_EQUIPAVOLUNTARIO_DESATIVAR);
            
            statement.setInt(1, idvol);
            
            try {
                statement.executeUpdate();
            }
            finally {
                statement.close();
                //connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error Update VoluntarioEquipa ");
        }

    }
    
    public int getEquipaActiva(Connection connection, int idvol) throws PersistenceException{
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPAVOLUNTARIO_ACTIVO);
            statement.setInt(1, idvol);
            ResultSet result = statement.executeQuery();
            int numero = -1;
            try {
                if (result.next()) {
                    numero = result.getInt("Equipa");
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return numero;
        } catch (SQLException ex) {
            throw new PersistenceException("Error Update VoluntarioEquipa ");
        }
    }
    
    private boolean existeRegisto(Connection connection, int idvol, int idequipa) throws PersistenceException {
        try {
            //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
            PreparedStatement statement = connection.prepareStatement(SELECT_EQUIPAVOLUNTARIO_EXISTE);
            statement.setInt(1, idvol);
            statement.setInt(2, idequipa);
            ResultSet result = statement.executeQuery();
            boolean flag = false;
            try {
                if (result.next()) {
                    flag = true;
                }
            } finally {
                result.close();
                statement.close();
                //connection.close();
            }

            return flag;
        } catch (SQLException ex) {
            throw new PersistenceException("Error Update VoluntarioEquipa ");
        }
    }
    
    public void addVoluntarioEquipa(Connection connection, int idvol, int idequipa) throws PersistenceException{
        try {
            VoluntarioDAO vdao = new VoluntarioDAO();
            if (existeEquipa(connection,idequipa) && vdao.existeVoluntario(connection,idvol)) {
                if (getEquipaActiva(connection,idvol) != idequipa) {
                    if (temEquipaActiva(connection,idvol)) {
                        desativaEquipaActiva(connection,idvol);
                    }
                    if (existeRegisto(connection,idvol, idequipa)) {
                        //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
                        PreparedStatement statement = connection.prepareStatement(UPDATE_EQUIPAVOLUNTARIO_ATIVAR);

                        statement.setInt(1, idvol);
                        statement.setInt(2, idequipa);

                        try {
                            statement.executeUpdate();
                        } finally {
                            statement.close();
                            //connection.close();
                        }
                    } else {
                        //Connection connection = DriverManager.getConnection(getURL(), getUser(), getPassword());
                        PreparedStatement statement = connection.prepareStatement(INSERT_EQUIPAVOLUNTARIO);

                        statement.setInt(1, idequipa);
                        statement.setInt(2, idvol);

                        try {
                            statement.executeUpdate();
                        } finally {
                            statement.close();
                            //connection.close();
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error INSERT VoluntarioEquipa ");
        }
    }
}
